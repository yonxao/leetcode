@SuppressWarnings("all")
class Q001 {

    public static void main(String[] args) {
        System.out.println(tableSizeFor(123));
        System.out.println(n2(123));
    }


    /**
     * 把数减一后, 转成二进制, 获取最高位的1对应的十进制数, 乘以2
     */
    public static int n2(Integer capacity) {
        // 获取一个数的二进制最高位
        int i = Integer.highestOneBit(capacity - 1);
        // i |= (i >>  1);
        // i |= (i >>  2);
        // i |= (i >>  4);
        // i |= (i >>  8);
        // i |= (i >> 16);
        // return i - (i >>> 1);
        return i * 2;
    }


    /**
     * 先把数转成二进制，然后把真值的所有位的数变成 1，最后 +1
     * 13
     * 0000 1101
     * 0000 1111
     * 0001 0000
     * 16
     */
    public static int tableSizeFor(int capacity) {
        // 0000 0000 0000 0000  0000 0000 0000 0001 <<30  0100 0000 0000 0000  0000 0000 0000 0000
        int MAXIMUM_CAPACITY = 1 << 30;
        // 减一的目的是防止传入的就是 2 的 n 次幂
        int n = capacity - 1;

        // n = 129   n-1 = 128
        // 0000 0000 0000 0000  0000 0000 1000 0000 >>>1  0000 0000 0000 0000  0000 0000 0100 0000
        // 0000 0000 0000 0000  0000 0000 1000 0000  n
        // 0000 0000 0000 0000  0000 0000 0100 0000  n >>> 1
        // 0000 0000 0000 0000  0000 0000 1100 0000  n |= n >>> 1
        n |= n >>> 1;
        // 0000 0000 0000 0000  0000 0000 1100 0000
        // 0000 0000 0000 0000  0000 0000 0011 0000
        // 0000 0000 0000 0000  0000 0000 1111 0000
        n |= n >>> 2;
        // 0000 0000 0000 0000  0000 0000 1111 0000
        // 0000 0000 0000 0000  0000 0000 0000 1111
        // 0000 0000 0000 0000  0000 0000 1111 1111
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }
}